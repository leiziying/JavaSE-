package demo;
/*
SE
1)访问限定符
   1.顶级 （一开始定义类的时候用到的）
   2.成员级（类里面用到的）
    public    package-private     protected   private
    public    空白                protected   private
static作用  和对象解绑
   1）静态属性   不再保存对象中了，而是保存类中
   2）静态方法   不再传入一个隐式的this引用
在静态方法中(静态上下文中)：
    1)无法访问普通属性和调用普通方法
反之在普通方法中：
    2）可以正常访问静态属性和调用静态方法
 静态属性的存在并且只存在一份，表现出共享的特性，类似全局变量
 规范：  访问限定符    static

属性（包括静态属性）的初始化规则
    初始化方式：
        静态属性：
           1）定义时直接初始化
           2）利用静态代码块初始化
               语法   static { 初始化语句}
        普通：
           1）定义时直接初始化
           2）初始化代码块初始化
               语法 { 初始化语句}
           3）在构造方法中
时机：对于静态属性发生在类加载到内存中初始化
      对于普通属性发生在 对象被实例时初始化
顺序：
    1）类的加在一定发生在对象实例化之前
       静态属性的初始化一定发生在普通属性初始化之前
    2）静态初始化顺序，按照定义类时的书写顺序初始化
    3）普通属性初始化顺序，定义时和构造代码块按书写顺序初始化
                           构造方法中的初始化一定发生在最后，和书写顺序无关
 this的作用：
    1）构造方法中调用其他构造方法（必须出现在第一行）
    2）代表当前对象的引用
数据结构-复杂度
 复杂度：  不求甚解地衡量算法好坏的刻度尺
 时间复杂度（重点）   空间复杂度

 线性结构
 线性表：线性表是n个具有相同特性的数据元素的有限序列。线性表是一种在实际中广泛使用的数据结构，常见的线性表：顺序表，链表，栈，队列，字符串...
 线性表在逻辑上是线性结构，也就说是连续的一条直线。但是在物理结构上并不一定是连续的，线性表在物理上存储时，通常以数组和链式结构的形式存储

 数据结构： 主要操作-->增  删  查   改      初始化 （构造方法）   销毁（可能不存在）
 */
public class Review {
    int binarySearch(int[]  a,int v){
        int left=0;
        int right=a.length-1;
        while(left<right){
            int mid=(left+right)/2;
            if(v==a[mid]){
                return mid;
            }else if(v>a[mid]){
                left=mid+1;
            }else{
                right=mid-1;
            }
        }
        return -1;
    }
}
