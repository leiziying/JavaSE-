/*
面向对象三大特征：封装性，继承性，多态性
extends 继承或者 implements实现  是多态性的前提
左父右子就是多态
代码当中体现多态 ，其实就是一句话，父类引用指向子类对象
格式：
  父类名称  对象=new  子类名称（）；【左父右子】
或者：
  接口名称  对象名 =new  实现类名称（）；
访问成员变量变量的两种方式：
   1.直接通过对象名称访问成员变量，看等号左边是谁，优先用谁，没有则向上找
   2.间接通过成员方法访问成员变量，看该方法属于谁，优先用谁，没有则向上找
在多态的代码当中，成员方法的访问规则是：
   看new的是谁，就优先用谁，没有则向上找
口诀：编译看左边，运行看右边
对比一下：
    成员变量：编译看左边，运行还看左边
    成员方法：编译看左边，运行看右边
 */
public class Demo {
    public static void main(String[] args) {
        //使用多态的写法
        //左侧父类的引用，指向了右侧子类的对象
        //成员方法规律：看右边new的是谁就运行谁的方法
        Fu  obj=new Zi();
        obj.method();
        obj.methodFu();
    }
}
